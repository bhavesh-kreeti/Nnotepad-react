{"version":3,"sources":["components/Input/Input.js","axios-posts.js","containers/Posts/Post/Post.js","containers/Posts/Posts.js","containers/Notepad/Notepad.js","App.js","serviceWorker.js","index.js"],"names":["input","props","inputElement","elementType","elementConfig","id","label","className","value","onChange","inputChange","instance","axios","create","baseURL","Post","componentDidMount","$","stop","hide","showHandler","e","slideToggle","draggableId","this","index","provided","ref","innerRef","draggableProps","dragHandleProps","title","description","substring","length","date","onClick","delete","Component","Posts","state","posts","columns","postIds","columnOrder","notification","get","then","res","postObject","data","key","push","setState","componentDidUpdate","check","Object","keys","constructor","newPostId","onDragEnd","result","destination","source","droppableId","column","newPostIds","Array","from","splice","newColumn","newState","deleteHandler","updatedpost","indexOf","notif","message","type","store","addNotification","allPost","map","col","postId","droppableProps","placeholder","newPost","notepadForm","rows","cols","insert","container","animationIn","animationOut","dismiss","duration","onScreen","onInputChangeHandler","inputIdentifier","updatedNotepadForm","updatedAttribute","target","today","Date","dateTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","formSubmitHandler","preventDefault","document","querySelector","desc","trim","formData","formElementIdentifier","toUpperCase","post","name","catch","er","alert","inputElements","config","onSubmit","Input","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.411b6604.chunk.js","sourcesContent":["import React from 'react';\n\nconst input = (props) => {\n  let inputElement = null;\n  switch ( props.elementType ) {\n    case ( 'input' ):\n      inputElement = <input {...props.elementConfig} id={props.label} className=\"form-control form-control-lg my-2\" value = {props.value} onChange = {props.inputChange} />\n      break;\n    case ( 'text-area' ):\n      inputElement = <textarea {...props.elementConfig} id={props.label} value = {props.value} className=\"form-control form-control-lg my-2\" onChange = {props.inputChange} />\n      break;\n    default:\n      inputElement = <input />\n      break;\n  }\n  return (\n    <div className=\"form-group\">\n      <label>{props.label}</label>\n      {inputElement}\n    </div>\n  )\n}\n\nexport default input\n","import axios from 'axios'\n\n    const instance = axios.create({\n        baseURL: 'https://kreeti-react-notepad.firebaseio.com/'\n    })\n\nexport default instance;\n","import React, { Component } from 'react';\nimport 'react-notifications-component/dist/theme.css';\nimport { Draggable } from 'react-beautiful-dnd'\n\nimport './Post.css'\nimport $ from \"jquery\"\n\nclass Post extends Component {\n\n  componentDidMount = () => {\n    $('.complete').stop().hide()\n  }\n\n  showHandler = (e,id) => {\n    $('#' + id + '-desc > span').stop().slideToggle(1000)\n    $('#' + id + '-desc > p').stop().slideToggle(600)\n  }\n\n  render() {        \n    return(\n      <div>\n        <Draggable draggableId={this.props.id} index={this.props.index}>\n          {provided => (\n            <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            >\n              <div className=\"card text-dark border-primary my-3 post\">\n                <div className=\"card-header bg-dark text-white\">\n                  <h3>{this.props.title}</h3>\n                </div>\n                <div className=\"card-body desc\" id={`${this.props.id}-desc`}>\n                  <span className=\"teaser card-text\"> {this.props.description.substring(0,49)}\n                                                      {this.props.description.length > 49 ? \"....\" : null}\n                  </span>\n                  <p className=\"complete card-text\">{this.props.description}</p>\n                </div>\n                <div className=\"card-footer\">\n                  <span className=\"badge my-3 d-block d-lg-inline badge-pill badge-info\">{this.props.date}</span>\n                  <button className=\"show  ml-lg-5 btn  d-lg-inline btn-outline-primary\"\n                    id={this.props.id} onClick={(e) => this.showHandler(e,this.props.id)}>\n                    Show\n                  </button>\n                  <button className=\" ml-lg-3  btn ml-1 d-inline d-lg-inline btn-outline-danger\"\n                    onClick={() => this.props.delete(this.props.id)}>\n                    Delete\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </Draggable>\n      </div>\n    )\n  }\n}\n\nexport default Post;\n","import React, { Component } from 'react';\nimport axios from '../../axios-posts'\nimport Post from './Post/Post'\nimport { Droppable } from 'react-beautiful-dnd'\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { store } from 'react-notifications-component';\nimport  './Posts.css'\n\nclass Posts extends Component {\n\n  state = {\n    posts: null,\n    columns: {\n      'column-1': {\n        id: \"column-1\",\n        title: \"To do\",\n        postIds: []\n      }\n    },\n    columnOrder: [ 'column-1'],\n    notification: this.props.notification\n  }\n\n  componentDidMount = () => {\n    axios.get('/posts.json')\n    .then(res => {\n        let postObject = null;\n        postObject = {...res.data}\n        const postIds = []\n        for(let key in postObject){\n            postIds.push(key)\n        }\n        this.setState({\n            posts: postObject,\n            columns: {\n              'column-1': {\n                id: \"column-1\",\n                title: \"To do\",\n                postIds: postIds\n              }\n            },\n            columnOrder: [ 'column-1']\n        })\n      })\n  }\n\n  componentDidUpdate = () => {\n    let check = null\n    if(Object.keys(this.state.posts).length === 0 &&\n      this.state.posts.constructor === Object &&\n      this.props.newPostId !== null\n      ){\n      check = true;\n    }\n    else {\n      for(let key in this.state.posts){\n        if((`${this.props.newPostId}` == key) || (this.props.newPostId == null)){\n          check = false;\n          break;\n        }\n        else {\n          check = true\n        }\n      }\n    }\n\n  if(check){\n    axios.get('/posts.json')\n          .then(res => {\n            let postObject = null;\n            postObject = {...res.data}\n            const postIds = []\n            for(let key in postObject){\n              postIds.push(key)\n            }\n\n          this.setState({\n            posts: postObject,\n            columns: {\n              'column-1': {\n                id: \"column-1\",\n                title: \"To do\",\n                postIds: postIds\n                }\n              },\n            columnOrder: [ 'column-1']\n          })\n        })\n    }\n  }\n\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n    if(!destination) {\n      return\n    }\n\n    if(\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ){\n      return\n    }\n\n    const column = this.state.columns[source.droppableId]\n    const newPostIds = Array.from(column.postIds);\n    newPostIds.splice(source.index, 1);\n    newPostIds.splice(destination.index, 0, draggableId);\n\n    const newColumn = {\n      ...column,\n      postIds: newPostIds\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        [newColumn.id]: newColumn,\n      },\n    }\n\n    this.setState(newState)\n  }\n\n  deleteHandler = (id) => {\n    axios.delete(`/posts/${id}.json`).then(res => {\n\n      const updatedpost = {...this.state}\n      const index = this.state.columns[\"column-1\"].postIds.indexOf(id)\n      updatedpost.columns[\"column-1\"].postIds.splice(index,1)\n      delete updatedpost.posts[id]\n  \n      this.setState({\n        posts: updatedpost.posts,\n        columns: {\n          'column-1': {\n            postIds: updatedpost.columns[\"column-1\"].postIds\n          }\n        }\n    })\n    })\n    const notif = {...this.state.notification}\n      notif.title = \"Deleted  \"\n      notif.message = \"Post successfully deleted  \"\n      notif.type=\"danger\"\n      store.addNotification(notif);\n    }\n\n  render() {\n    let allPost = [];\n    this.state.columnOrder.map(col => {\n      const column = this.state.columns[col]\n      allPost = column.postIds.map(postId => {\n      return `${postId}`\n                })\n    });\n    return(\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\" posts container \">\n          <Droppable droppableId='column-1'>\n            {provided => \n              <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              >\n                {allPost.map((postId,index) => (\n                  <Post title={this.state.posts[postId].title} key={postId} index={index}\n                    id={postId} description={this.state.posts[postId].description}\n                    delete={() => this.deleteHandler(postId)} date={this.state.posts[postId].date} />\n                ))}\n              {provided.placeholder}\n              </div>\n            }\n          </Droppable>\n        </div>\n      </DragDropContext>\n    )\n  }\n}\n\nexport default Posts;\n","import React, { Component } from 'react';\nimport ReactNotification    from 'react-notifications-component';\nimport { store }            from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\n\nimport Input from '../../components/Input/Input'; \nimport axios from '../../axios-posts';\nimport Posts from  '../Posts/Posts';\nimport './Notepad.css'\n\nclass Post extends Component {\n  \n  state = {\n    newPost: null,\n    newPostId: null,\n    notepadForm: {\n      title: {\n        elementType: 'input',\n        elementConfig: {\n          label: \"Title\",\n          type: 'text',\n          placeholder: 'Enter Title'\n        },\n        value: ''\n      },\n      description: {\n        elementType: 'text-area',\n          elementConfig: {\n            label: \"Description\",\n            rows: \"5\",\n            cols: \"25\",\n            placeholder: \"Enter Description\"\n          },\n        value: ''\n      }\n    },\n    date: null,\n    notification: {\n      title: \"Required\",\n      message:  \"This cannot be blank\",\n      type: \"danger\",\n      insert: \"top\",\n      container: \"top-left\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: {\n        duration: 1000,\n        onScreen: true\n      }\n    }\n  }\n\n  componentDidMount = () => {\n    let notif = {...this.state.notification}\n    notif.title = \"Hello !!\";\n    notif.message = \"Welcome to this application\"\n    notif.type = \"success\"\n    notif.dismiss.duration = 3000\n    store.addNotification(notif);    \n  }\n\n  onInputChangeHandler = (e,inputIdentifier) => {\n    const updatedNotepadForm = {...this.state.notepadForm};\n    const updatedAttribute = updatedNotepadForm[inputIdentifier];\n    updatedAttribute.value = e.target.value;\n    const today = new Date();\n    const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    const dateTime = date+' '+time;\n    updatedNotepadForm[inputIdentifier] = updatedAttribute;\n    this.setState({\n      notepadForm: updatedNotepadForm,\n      date: dateTime\n    })\n  }\n\n  formSubmitHandler = (e) => {\n    e.preventDefault();\n    const title = document.querySelector('#Title').value;\n    const desc = document.querySelector('#Description').value\n    let notif = {...this.state.notification}\n  \n    if(title.trim().length > 0 && desc.trim().length > 0){\n      const formData = {};\n      for(let formElementIdentifier in this.state.notepadForm ){\n  \n        if(this.state.notepadForm[formElementIdentifier].value.trim().length < 5){\n          notif.message = `\"${formElementIdentifier.toUpperCase()} is too short\"`\n          store.addNotification(notif);\n          return\n        }\n        else {\n          formData[formElementIdentifier] = this.state.notepadForm[formElementIdentifier].value\n        }\n      }\n      formData.date = this.state.date\n\n      axios.post('/posts.json', formData).then( res => {\n        this.setState({\n          newPost: {...formData},\n          newPostId: res.data.name\n        })\n        document.querySelector('#Title').value=\"\";\n        document.querySelector('#Description').value=\"\";\n      })\n      .catch(er => alert(er))\n\n      notif.title = \"Posted\"\n      notif.message = \"Post successfully posted\"\n      notif.type=\"success\"\n      store.addNotification(notif);\n    }\n    else {\n      notif.title = \"Required\";\n      notif.message = \"Inputs cannot be blank\"\n      notif.type = \"danger\"\n      store.addNotification(notif);      \n    }\n  }\n\n  render() {\n    const inputElements = [];\n    for(let key in this.state.notepadForm ){\n      inputElements.push({\n        id: key,\n        config: this.state.notepadForm[key]\n      })\n    }\n\n    return(\n      <div className=\"row m-3 border shadow-lg p-3 height-fix mb-5 bg-white rounded bg-dark rounded\">\n        <ReactNotification />\n        <div className=\"col-lg-4 my-4 \">\n          <div className=\"card bg-info text-center Form card-form\">\n            <div className=\"card-body\">\n              <h3 className=\"card-header\">Notepad</h3>\n              <p className=\"\">write your short notes <span>✍️</span> </p>\n              <form onSubmit={this.formSubmitHandler}>\n                {inputElements.map(inputElement => (\n                  <Input key= {inputElement.id}\n                    elementType = {inputElement.config.elementType}\n                    elementConfig = {inputElement.config.elementConfig} \n                    label= {inputElement.config.elementConfig.label}  \n                    inputChange = {(e) => this.onInputChangeHandler(e,inputElement.id)} />\n                  ))}\n                <button className=\"btn btn-outline-light btn-block\">Add Note <span>✍️</span></button>\n              </form>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-8 \">\n          <Posts newPost={this.state.newPost} newPostId={this.state.newPostId} notification={this.state.notification} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Post\n","import React from 'react';\nimport './App.css';\nimport Notepad from './containers/Notepad/Notepad'\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Notepad />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}