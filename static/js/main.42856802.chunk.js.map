{"version":3,"sources":["components/Input/Input.js","axios-posts.js","containers/Posts/Post/Post.js","containers/Posts/Posts.js","containers/Notepad/Notepad.js","App.js","serviceWorker.js","index.js"],"names":["input","props","inputElement","elementType","elementConfig","id","label","className","value","onChange","inputChange","instance","axios","create","baseURL","Post","showHandler","e","$","stop","slideToggle","componentDidMount","hide","draggableId","this","index","provided","ref","innerRef","draggableProps","dragHandleProps","title","description","substring","length","class","date","onClick","delete","Component","Posts","state","posts","columns","postIds","columnOrder","notification","get","then","res","postObject","data","key","push","setState","componentDidUpdate","check","Object","keys","constructor","newPostId","onDragEnd","result","destination","source","droppableId","column","console","log","newPostIds","Array","from","splice","newColumn","newState","deleteHandler","updatedpost","indexOf","notif","message","type","store","addNotification","test","allPost","map","col","postId","droppableProps","placeholder","newPost","notepadForm","rows","cols","insert","container","animationIn","animationOut","dismiss","duration","onScreen","onInputChangeHandler","inputIdentifier","updatedNotepadForm","updatedAttribute","target","today","Date","dateTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","formSubmitHandler","document","querySelector","desc","preventDefault","trim","formData","formElementIdentifier","toUpperCase","post","name","catch","er","alert","inputElements","config","onSubmit","Input","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.42856802.chunk.js","sourcesContent":["import React from 'react';\n\nconst input = (props) => {\n    let inputElement = null;\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input {...props.elementConfig} id={props.label} className=\"form-control form-control-lg my-2\" value = {props.value} onChange = {props.inputChange} />\n            break;\n        case ( 'text-area' ):\n            inputElement = <textarea {...props.elementConfig} id={props.label} value = {props.value} className=\"form-control form-control-lg my-2\" onChange = {props.inputChange} />\n            break;\n        default:\n            inputElement = <input />\n            break;\n    }\n    return (\n        <div className=\"form-group\">\n            <label>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\n\nexport default input","import axios from 'axios'\n\n    const instance = axios.create({\n        baseURL: 'https://kreeti-react-notepad.firebaseio.com/'\n    })\n\nexport default instance;\n","import React, { Component } from 'react';\nimport $ from \"jquery\"\nimport axios from '../../../axios-posts'\nimport ReactNotification from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\nimport { store } from 'react-notifications-component';\nimport { Draggable } from 'react-beautiful-dnd'\n\n\nclass Post extends Component {\n\n \n    showHandler = (e,id) => {\n        $('#' + id + '-desc > span').stop().slideToggle(1000)\n        $('#' + id + '-desc > p').stop().slideToggle(600)\n    }\n\n    componentDidMount = () => {\n        $('.complete').stop().hide()\n    }\n\n    render() {\n        \n        return(\n            <div>\n                <Draggable draggableId={this.props.id} index={this.props.index}>\n                  {provided => (\n                    <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    >\n                  <div className=\"card text-dark border-primary my-3 w-75\">\n                    <div className=\"card-header bg-dark text-white\">\n                        <h3>{this.props.title}</h3>\n                    </div>\n                    <div className=\"card-body desc\" id={`${this.props.id}-desc`}>\n                        <span className=\"teaser card-text\"> {this.props.description.substring(0,49)} {this.props.description.length > 49 ? \"....\" : null} </span>\n                        <p className=\"complete card-text\">{this.props.description}</p>\n                    </div>\n                    <div className=\"card-footer\">\n                        <span class=\"badge my-3 d-block d-lg-inline badge-pill badge-info\">{this.props.date}</span>\n                        <button className=\"show  ml-lg-5 btn  d-lg-inline btn-outline-primary\" id={this.props.id} onClick={(e) => this.showHandler(e,this.props.id)}>Show</button>\n                        <button className=\" ml-lg-3  btn ml-1 d-inline d-lg-inline btn-outline-danger\" onClick={() => this.props.delete(this.props.id)}>Delete</button>\n                    </div>\n                </div>\n                    </div>\n                  )}\n              </Draggable>\n                \n            </div>\n        )\n    }\n}\n\nexport default Post;","import React, { Component } from 'react';\nimport axios from '../../axios-posts'\nimport Post from './Post/Post'\nimport $ from \"jquery\"\nimport { Droppable } from 'react-beautiful-dnd'\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport ReactNotification from 'react-notifications-component';\nimport { store } from 'react-notifications-component';\nimport  './Posts.css'\n\nclass Posts extends Component {\n\n  state = {\n      posts: null,\n      columns: {\n          'column-1': {\n            id: \"column-1\",\n            title: \"To do\",\n            postIds: []\n          }\n        },\n      columnOrder: [ 'column-1'],\n      notification: this.props.notification\n  }\n\n  componentDidMount = () => {\n      // console.log(this.props.id)\n    axios.get('/posts.json')\n    .then(res => {\n        let postObject = null;\n        postObject = {...res.data}\n        const postIds = []\n        for(let key in postObject){\n            postIds.push(key)\n        }\n        this.setState({\n            posts: postObject,\n            columns: {\n              'column-1': {\n                id: \"column-1\",\n                title: \"To do\",\n                postIds: postIds\n              }\n            },\n            columnOrder: [ 'column-1']\n        })\n\n      })\n  }\n\n  componentDidUpdate = () => {\n    let check = null\n    if(Object.keys(this.state.posts).length === 0 &&\n       this.state.posts.constructor === Object &&\n       this.props.newPostId !== null\n      ){\n      check = true;\n    }\n    else {\n      for(let key in this.state.posts){\n        if((`${this.props.newPostId}` == key) || (this.props.newPostId == null)){\n          check = false;\n          break;\n        }\n        else {\n          check = true\n        }\n      }\n    }\n    if(check){\n      axios.get('/posts.json')\n        .then(res => {\n            let postObject = null;\n            postObject = {...res.data}\n            const postIds = []\n            for(let key in postObject){\n                postIds.push(key)\n            }\n            this.setState({\n                posts: postObject,\n                columns: {\n                  'column-1': {\n                    id: \"column-1\",\n                    title: \"To do\",\n                    postIds: postIds\n                  }\n                },\n                columnOrder: [ 'column-1']\n            })\n          })\n    }\n  }\n\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n    // console.log(result)\n    if(!destination) {\n      return\n    }\n\n    if(\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n    const column = this.state.columns[source.droppableId]\n    console.log(column,\"COLUMN\")\n    const newPostIds = Array.from(column.postIds);\n    console.log(newPostIds,\"POST ARRAY\")\n    newPostIds.splice(source.index, 1);\n    console.log(newPostIds,\"FIRST SPLICE\")\n    newPostIds.splice(destination.index, 0, draggableId);\n    console.log(newPostIds,'FINAL SPLICE')\n    const newColumn = {\n      ...column,\n      postIds: newPostIds\n    };\n    console.log(newColumn,\"NEW COLUMN\")\n\n    const newState = {\n      ...this.state,\n      columns: {\n        [newColumn.id]: newColumn,\n      },\n    }\n    console.log(newState,\"NEW STATE\")\n    this.setState(newState)\n  }\n\n  deleteHandler = (id) => {\n    axios.delete(`/posts/${id}.json`)\n    const updatedpost = {...this.state}\n    console.log(updatedpost.posts,\"POST\")\n    console.log(updatedpost.posts[id], \"DELETED POST\")\n    const index = this.state.columns[\"column-1\"].postIds.indexOf(id)\n    console.log(index,\"INDEX\")\n    updatedpost.columns[\"column-1\"].postIds.splice(index,1)\n    console.log(updatedpost,\"AFTER DELETE\")\n    delete updatedpost.posts[id]\n    this.setState({\n      posts: updatedpost.posts,\n      columns: {\n        'column-1': {\n          postIds: updatedpost.columns[\"column-1\"].postIds\n        }\n      }\n    })\n    const notif = {...this.state.notification}\n      notif.title = \"Deleted  \"\n      notif.message = \"Post successfully deleted  \"\n      notif.type=\"danger\"\n      store.addNotification(notif);\n    \n    store.addNotification(this.state.notification)\n  }\n\n  render() {\n    console.log(this.props.newPostId,\"NEWPOSTID\")\n    console.log(this.state.posts,\"MY POST\")\n    let test = null\n    for(let key in this.state.posts){\n      if(`${this.props.newPostId}` == key){\n        test = \"present\"\n      }\n      else{\n        test = \"absent\"\n      }\n    }\n    console.log(test)\n      let allPost = [];\n      this.state.columnOrder.map(col => {\n        console.log(col,\"UPDATE_COL\")\n        const column = this.state.columns[col]\n        console.log(column,\"UPDATED COLUMN\")\n        allPost = column.postIds.map(postId => {\n          console.log(postId,\"UPDATED POST ID\")\n          return `${postId}`\n        })\n      });\n\n      let newPost = null;\n      // if(this.props.)\n      \n      return(\n        <div>\n           {/* <ReactNotification /> */}\n        <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\" posts container \">\n          <Droppable droppableId='column-1'>\n            {provided => \n              <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              >\n                {allPost.map((postId,index) => (\n                  \n                  <Post title={this.state.posts[postId].title} key={postId} index={index}\n                        id={postId} description={this.state.posts[postId].description}\n                        delete={() => this.deleteHandler(postId)} date={this.state.posts[postId].date} />\n              ))}\n                {provided.placeholder}\n              </div>\n            }\n          </Droppable>\n        </div>\n        </DragDropContext>\n        </div>\n\n      )\n    }\n}\n\nexport default Posts;","import React, { Component } from 'react';\nimport classes from './Notepad.css'\nimport Input from '../../components/Input/Input'; \nimport axios from '../../axios-posts';\nimport Posts from  '../Posts/Posts';\nimport ReactNotification from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\nimport { store } from 'react-notifications-component';\n\nclass Post extends Component {\n  \n  state = {\n      newPost: null,\n      newPostId: null,\n      notepadForm: {\n          title: {\n              elementType: 'input',\n              elementConfig: {\n                  label: \"Title\",\n                  type: 'text',\n                  placeholder: 'Enter Title'\n              },\n              value: ''\n          },\n          description: {\n              elementType: 'text-area',\n              elementConfig: {\n                  label: \"Description\",\n                  rows: \"5\",\n                  cols: \"25\",\n                  placeholder: \"Enter Description\"\n              },\n              value: ''\n          }\n      },\n      date: null,\n      notification: {\n        title: \"Required\",\n          message:  \"This cannot be blank\",\n          type: \"danger\",\n          insert: \"top\",\n          container: \"top-left\",\n          animationIn: [\"animated\", \"fadeIn\"],\n          animationOut: [\"animated\", \"fadeOut\"],\n          dismiss: {\n            duration: 1000,\n            onScreen: true\n          }\n      }\n  }\n  componentDidMount = () => {\n    let notif = {...this.state.notification}\n    notif.title = \"Hello !!\";\n    notif.message = \"Welcome to this application\"\n    notif.type = \"success\"\n    notif.dismiss.duration = 3000\n    store.addNotification(notif);    \n  }\n\n  onInputChangeHandler = (e,inputIdentifier) => {\n    const updatedNotepadForm = {...this.state.notepadForm};\n    const updatedAttribute = updatedNotepadForm[inputIdentifier];\n    updatedAttribute.value = e.target.value;\n    const today = new Date();\n    const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    const dateTime = date+' '+time;\n    // const date = dateTime;\n    updatedNotepadForm[inputIdentifier] = updatedAttribute;\n    this.setState({\n      notepadForm: updatedNotepadForm,\n      date: dateTime\n    })\n  }\n\n  formSubmitHandler = (e) => {\n    console.log(e,\"EEEEE\")\n    const title = document.querySelector('#Title').value;\n    const desc = document.querySelector('#Description').value\n    console.log(title.length,\"TITLE LENGTH\")\n    console.log(desc.length,\"DESC LENGTH\")\n    e.preventDefault();\n    let notif = {...this.state.notification}\n    if(title.trim().length > 0 && desc.trim().length > 0){\n      const formData = {};\n      for(let formElementIdentifier in this.state.notepadForm ){\n        if(this.state.notepadForm[formElementIdentifier].value.trim().length < 5){\n          notif.message = `\"${formElementIdentifier.toUpperCase()} is too short\"`\n          store.addNotification(notif);\n          return\n        }\n        else {\n          formData[formElementIdentifier] = this.state.notepadForm[formElementIdentifier].value\n        }\n      }\n      formData.date = this.state.date\n      axios.post('/posts.json', formData).then( res => {\n        // console.log(res.config.data)\n        this.setState({\n          newPost: {...formData},\n          newPostId: res.data.name\n        })\n        document.querySelector('#Title').value=\"\";\n        document.querySelector('#Description').value=\"\";\n      })\n      .catch(er => alert(er))\n      \n      notif.title = \"Posted\"\n      notif.message = \"Post successfully posted\"\n      notif.type=\"success\"\n      store.addNotification(notif);\n    }\n    else {\n      notif.title = \"Required\";\n      notif.message = \"Inputs cannot be blank\"\n      notif.type = \"danger\"\n      store.addNotification(notif);      \n    }\n  }\n\n\n  render() {\n      const inputElements = [];\n      for(let key in this.state.notepadForm ){\n          inputElements.push({\n              id: key,\n              config: this.state.notepadForm[key]\n          })\n      }\n\n      return(\n        <div className=\"row m-3 border shadow-lg p-3 mb-5 bg-white rounded bg-dark  rounded\">\n          <ReactNotification />\n          <div className=\"col-lg-4 my-4 \">\n            <div className=\"card bg-info text-center Form card-form\">\n              <div className=\"card-body\">\n                <h3 className=\"card-header\">Notepad</h3>\n                <p className=\"\">write your short notes <span>✍️</span> </p>\n                <form onSubmit={this.formSubmitHandler}>\n                  {inputElements.map(inputElement => (\n                        <Input key= {inputElement.id}\n                              elementType = {inputElement.config.elementType}\n                              elementConfig = {inputElement.config.elementConfig} \n                              label= {inputElement.config.elementConfig.label}  \n                              inputChange = {(e) => this.onInputChangeHandler(e,inputElement.id)} />\n                        ))}\n                  <button className=\"btn btn-outline-light btn-block\">Add Note <span>✍️</span></button>\n                </form>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-8 \">\n            <Posts newPost={this.state.newPost} newPostId={this.state.newPostId} notification={this.state.notification} />\n          </div>\n        </div>\n      )\n  }\n}\n\nexport default Post\n","import React from 'react';\nimport './App.css';\nimport Notepad from './containers/Notepad/Notepad'\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Notepad />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}